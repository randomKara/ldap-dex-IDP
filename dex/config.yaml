issuer: http://172.25.0.30

storage:
  type: memory

web:
  http: 0.0.0.0:5556
  allowedOrigins: ['http://172.25.0.30', 'http://172.25.0.40']

logger:
  level: "debug"
  format: "text"

oauth2:
  skipApprovalScreen: true
  responseTypes: ["code"]

staticClients:
- id: flask-app
  redirectURIs:
  - 'http://172.25.0.40/oauth2callback'
  name: 'Flask Application (Apache OAuth2 PEP)'
  secret: flask-app-secret
  trustedPeers: ['http://172.25.0.40']

connectors:
- type: ldap
  id: ldap
  name: LDAP
  config:
    host: 172.25.1.10:389
    insecureNoSSL: true
    insecureSkipVerify: true
    
    # Authentication for LDAP searches
    bindDN: cn=admin,dc=example,dc=org
    bindPW: adminpassword
    
    # Base DN for searching users
    userSearch:
      baseDN: ou=people,dc=example,dc=org
      filter: "(objectClass=inetOrgPerson)"
      username: uid
      idAttr: uid
      emailAttr: mail
      nameAttr: displayName
      preferredUsernameAttr: uid
    
    # Base DN for searching groups
    groupSearch:
      baseDN: ou=groups,dc=example,dc=org
      filter: "(objectClass=groupOfNames)"
      userMatchers:
      - userAttr: DN
        groupAttr: member
      nameAttr: cn

enablePasswordDB: false