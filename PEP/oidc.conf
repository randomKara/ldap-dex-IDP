# OIDC Configuration with Zero Trust Security - ANSSI compliant
OIDCClientID flask-app
OIDCClientSecret flask-app-secret
OIDCRedirectURI http://172.25.0.40/oauth2callback

# Manual endpoint configuration with IP-based routing
OIDCProviderIssuer http://172.25.0.30
OIDCProviderAuthorizationEndpoint http://172.25.0.30/auth
OIDCProviderTokenEndpoint http://172.25.0.20:5556/token
OIDCProviderTokenEndpointAuth client_secret_post
OIDCProviderUserInfoEndpoint http://172.25.0.20:5556/userinfo
OIDCProviderJwksUri http://172.25.0.20:5556/keys

# Security configurations
OIDCScope "openid email profile groups"
OIDCRemoteUserClaim preferred_username
OIDCPassClaimsAs environment
OIDCCryptoPassphrase oauth2-pep-crypto-passphrase-2024-secure
OIDCStateMaxNumberOfCookies 20
OIDCSessionMaxDuration 3600

# Session security - simplified
OIDCCookieHTTPOnly On

# Additional security headers
Header always set X-Content-Type-Options "nosniff"
Header always set X-Frame-Options "DENY"
Header always set X-XSS-Protection "1; mode=block"
Header always set Referrer-Policy "strict-origin-when-cross-origin"

<Location />
    AuthType openid-connect
    Require valid-user

    # Set user headers for the backend application
    RequestHeader set X-User-ID %{OIDC_CLAIM_preferred_username}e
    RequestHeader set X-User-Name %{OIDC_CLAIM_name}e
    RequestHeader set X-User-Email %{OIDC_CLAIM_email}e
    RequestHeader set X-User-Groups %{OIDC_CLAIM_groups}e
    RequestHeader set X-Authenticated "true"
    
    # Security headers for backend communication
    RequestHeader set X-Forwarded-For %{REMOTE_ADDR}s
    RequestHeader set X-Real-IP %{REMOTE_ADDR}s
    
    # CORS headers for secure communication
    Header always set Access-Control-Allow-Origin "http://172.25.0.40"
    Header always set Access-Control-Allow-Credentials "true"
    Header always set Access-Control-Allow-Methods "GET, POST, OPTIONS"

    # Proxy to Flask backend with IP-based routing
    ProxyPass http://172.25.0.50:8080/
    ProxyPassReverse http://172.25.0.50:8080/
    
    # Security: Remove sensitive headers before forwarding
    RequestHeader unset Authorization
    RequestHeader unset Cookie
</Location> 